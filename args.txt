# Classpath
-cp "target/classes;target/lib/*"

# Existing JVM arguments
-XX:+UseG1GC

# GC arguments
-Xms2g
-Xmx8g
-XX:GCTimeRatio=19                          # 5% (1/20) of time spent in GC

# More aggressive inlining (critical for your bitmask operations)
-XX:MaxInlineSize=70                        # Double from 35 to 70
-XX:FreqInlineSize=650                      # Double from 325 to 650
-XX:InlineSmallCode=5000                    # Double from 2500 to 5000
-XX:MaxInlineLevel=20                       # Increase from 15 to 20

# Earlier C2 compilation (get to peak performance faster)
-XX:CompileThreshold=5000                   # Reduce from 10000 to 5000
-XX:Tier3CompileThreshold=1000              # Reduce from 2000 to 1000
-XX:Tier4CompileThreshold=7500              # Reduce from 15000 to 7500

# Enable Vector API support (Java 21+)
-XX:+UnlockExperimentalVMOptions
-XX:+EnableVectorSupport
-XX:+EnableVectorReboxing
-XX:+EnableVectorAggressiveReboxing

# Optimize vector operations
-XX:MaxVectorSize=32                        # Explicitly set max vector size 
-XX:+AlignVector

# Larger TLABs for reduced allocation contention
-XX:+UseTLAB                                # Explicitly enable TLABs
-XX:TLABSize=512k                           # Set an initial TLAB size of 512 KB
-XX:+ResizeTLAB                             # Explicitly allow for the resizing of TLABs
-XX:TLABWasteTargetPercent=5                # Increase from 1% to 5% waste target

# Pre-touch memory for consistent performance
-XX:+AlwaysPreTouch

# Reduce allocation overhead
-XX:+EliminateAllocations                   # Explicitly enable allocation elimination
-XX:+EliminateAutoBox                       # Explicitly enable auto-boxing elimination
-XX:EliminateAllocationArraySizeLimit=128   # Double from 64 to 128

# Throughput-focused G1 tuning
-XX:MaxGCPauseMillis=100                    # Reduce from 200 to 100 ms
-XX:G1NewSizePercent=40                     # Increase from 5% to 40% (more young-gen for an allocation-heavy workload)
-XX:G1MaxNewSizePercent=80                  # Increase from 60% to 80% (allow larger young-gen)
-XX:G1HeapRegionSize=16m                    # Increase from 8m to 16m for larger heap
-XX:G1MixedGCCountTarget=4                  # Reduce from 8 for faster old gen cleanup
-XX:+G1UseAdaptiveIHOP                      # Explicitly enable adaptive IHOP

# Thread prioritization
-XX:+UseThreadPriorities                    # Explicitly enable thread priorities
-XX:+UseCriticalCompilerThreadPriority      # Prioritize JIT compilation

# Better parallelism control
-XX:+UseDynamicNumberOfCompilerThreads      # Explicitly enable dynamic compiler threads
-XX:CICompilerCount=16                      # Increase from 12 to 16 (matches your thread count)

# Reduce deoptimization sensitivity
-XX:PerMethodTrapLimit=200                  # Double from 100 to 200
-XX:PerBytecodeTrapLimit=8                  # Double from 4 to 8
-XX:PerMethodRecompilationCutoff=800        # Increase from 400 to 800

# Better branch prediction
-XX:+UseCountLeadingZerosInstruction        # Explicitly enable leading zeros instruction
-XX:+UseCountTrailingZerosInstruction       # Explicitly enable trailing zeros instruction

# Enable Vector API
--enable-preview
--add-modules jdk.incubator.vector